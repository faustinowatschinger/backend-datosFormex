require('dotenv').config();
// Compatibilidad node-fetch seg√∫n versi√≥n de Node. Usar import din√°mico si es ESM.
let fetchFn;
try {
    fetchFn = require('node-fetch');
    // node-fetch v2 exporta funci√≥n directamente, v3 exporta como ESM
    if (fetchFn.default) fetchFn = fetchFn.default;
} catch (e) {
    fetchFn = (...args) => import('node-fetch').then(({default: f}) => f(...args));
}
const fetch = (...args) => fetchFn(...args);

const API_URL = 'http://localhost:4000/api';
const TEST_USER = {
    email: 'test@example.com',
    password: 'testpass123'
};

/**
 * Script para probar los nuevos endpoints del frontend
 */
async function testFrontendEndpoints() {
    console.log('üöÄ Iniciando pruebas de endpoints del frontend\n');

    try {
        // 1. Login para obtener token
        console.log('üîë PASO 1: Autenticaci√≥n');
        
        const loginResp = await fetch(`${API_URL}/auth/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(TEST_USER)
        });

        let token;
        if (loginResp.ok) {
            const loginData = await loginResp.json();
            token = loginData.token;
            console.log('‚úÖ Login exitoso');
        } else {
            // Si falla el login, intentar registrar primero
            console.log('‚ö†Ô∏è Login fall√≥, intentando registrar usuario...');
            
            const registerResp = await fetch(`${API_URL}/auth/register`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(TEST_USER)
            });

            if (registerResp.ok) {
                console.log('‚úÖ Usuario registrado');
                
                // Intentar login nuevamente
                const loginResp2 = await fetch(`${API_URL}/auth/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(TEST_USER)
                });

                if (loginResp2.ok) {
                    const loginData2 = await loginResp2.json();
                    token = loginData2.token;
                    console.log('‚úÖ Login exitoso despu√©s del registro');
                } else {
                    throw new Error('No se pudo hacer login despu√©s del registro');
                }
            } else {
                const regError = await registerResp.json();
                throw new Error(`Error en registro: ${regError.msg || regError.message}`);
            }
        }

        const authHeaders = {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        };

        // 2. Probar endpoint de c√°maras
        console.log('\nüìä PASO 2: Obtener lista de c√°maras');
        
        // Probar nueva API
        try {
            const camarasResp = await fetch(`${API_URL}/data/mediciones`, {
                headers: authHeaders
            });

            if (camarasResp.ok) {
                const camarasData = await camarasResp.json();
                console.log(`‚úÖ Nueva API de mediciones: ${camarasData.length} c√°maras encontradas`);
                
                if (camarasData.length > 0) {
                    console.log(`   üìã C√°maras disponibles: ${camarasData.map(c => c.id).join(', ')}`);
                    
                    // Probar con la primera c√°mara
                    const primeraCamara = camarasData[0];
                    
                    // 3. Probar fechas de c√°mara
                    console.log(`\nüìÖ PASO 3: Obtener fechas para c√°mara ${primeraCamara.id}`);
                    
                    const fechasResp = await fetch(`${API_URL}/data/mediciones/camera/${primeraCamara.id}/dates`, {
                        headers: authHeaders
                    });

                    if (fechasResp.ok) {
                        const fechas = await fechasResp.json();
                        console.log(`‚úÖ Fechas obtenidas: ${fechas.length} d√≠as disponibles`);
                        
                        if (fechas.length > 0) {
                            console.log(`   üìÖ Rango: ${fechas[0]} a ${fechas[fechas.length - 1]}`);
                            
                            // 4. Probar datos de c√°mara
                            console.log(`\nüìà PASO 4: Obtener datos para c√°mara ${primeraCamara.id}`);
                            
                            const datosResp = await fetch(`${API_URL}/data/mediciones/camera/${primeraCamara.id}?date=${fechas[fechas.length - 1]}`, {
                                headers: authHeaders
                            });

                            if (datosResp.ok) {
                                const datos = await datosResp.json();
                                console.log(`‚úÖ Datos obtenidos: ${datos.docs.length} mediciones`);
                                if (datos.variables) {
                                    console.log(`   üè∑Ô∏è  Variables detectadas (${datos.variables.length}): ${datos.variables.slice(0,15).join(', ')}${datos.variables.length>15?' ...':''}`);
                                }
                                
                                if (datos.docs.length > 0) {
                                    const primerMedicion = datos.docs[0];
                                    console.log(`   üìä Primer registro: ${primerMedicion.timestamp}`);
                                    console.log(`   üå°Ô∏è  TA1: ${primerMedicion.data.TA1}¬∞C`);
                                    console.log(`   üí® Hum: ${primerMedicion.data.Hum}%`);
                                }
                            } else {
                                const error = await datosResp.json();
                                console.log(`‚ùå Error obteniendo datos: ${error.msg}`);
                            }
                        }
                    } else {
                        const error = await fechasResp.json();
                        console.log(`‚ùå Error obteniendo fechas: ${error.msg}`);
                    }
                }
            } else {
                const error = await camarasResp.json();
                console.log(`‚ùå Error en nueva API: ${error.error || error.message}`);
            }
        } catch (error) {
            console.log(`‚ùå Error conectando a nueva API: ${error.message}`);
        }

        // 5. Probar API antigua como comparaci√≥n
        console.log('\nüîÑ PASO 5: Probar API antigua (FormexCam)');
        
        try {
            const camarasAntiguaResp = await fetch(`${API_URL}/data`, {
                headers: authHeaders
            });

            if (camarasAntiguaResp.ok) {
                const camarasAntiguaData = await camarasAntiguaResp.json();
                console.log(`üìä API antigua: ${camarasAntiguaData.length} c√°maras encontradas`);
                
                if (camarasAntiguaData.length > 0) {
                    console.log(`   üìã C√°maras FormexCam: ${camarasAntiguaData.map(c => c.id).join(', ')}`);
                }
            } else {
                const error = await camarasAntiguaResp.json();
                console.log(`‚ùå API antigua tambi√©n fall√≥: ${error.message}`);
            }
        } catch (error) {
            console.log(`‚ùå Error conectando a API antigua: ${error.message}`);
        }

        console.log('\nüéâ Pruebas completadas');

    } catch (error) {
        console.error('\n‚ùå Error en pruebas:', error.message);
        process.exit(1);
    }
}

// Ejecutar solo si se llama directamente
if (require.main === module) {
    testFrontendEndpoints().catch(console.error);
}

module.exports = { testFrontendEndpoints };